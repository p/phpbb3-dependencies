<?php
 namespace Symfony\Component\Process; class Process { private $commandline; private $cwd; private $env; private $stdin; private $timeout; private $options; private $exitcode; private $status; private $stdout; private $stderr; public function __construct($commandline, $cwd = null, array $env = null, $stdin = null, $timeout = 60, array $options = array()) { if (!function_exists('proc_open')) { throw new \RuntimeException('The Process class relies on proc_open, which is not available on your PHP installation.'); } $this->commandline = $commandline; $this->cwd = null === $cwd ? getcwd() : $cwd; if (null !== $env) { $this->env = array(); foreach ($env as $key => $value) { $this->env[(binary) $key] = (binary) $value; } } else { $this->env = null; } $this->stdin = $stdin; $this->timeout = $timeout; $this->options = array_merge(array('suppress_errors' => true, 'binary_pipes' => true, 'bypass_shell' => false), $options); } public function run($callback = null) { $this->stdout = ''; $this->stderr = ''; $that = $this; $callback = function ($type, $data) use ($that, $callback) { if ('out' == $type) { $that->addOutput($data); } else { $that->addErrorOutput($data); } if (null !== $callback) { call_user_func($callback, $type, $data); } }; $descriptors = array(array('pipe', 'r'), array('pipe', 'w'), array('pipe', 'w')); $process = proc_open($this->commandline, $descriptors, $pipes, $this->cwd, $this->env, $this->options); if (!is_resource($process)) { throw new \RuntimeException('Unable to launch a new process.'); } foreach ($pipes as $pipe) { stream_set_blocking($pipe, false); } if (null === $this->stdin) { fclose($pipes[0]); $writePipes = null; } else { $writePipes = array($pipes[0]); $stdinLen = strlen($this->stdin); $stdinOffset = 0; } unset($pipes[0]); while ($pipes || $writePipes) { $r = $pipes; $w = $writePipes; $e = null; $n = @stream_select($r, $w, $e, $this->timeout); if (false === $n) { break; } elseif ($n === 0) { proc_terminate($process); throw new \RuntimeException('The process timed out.'); } if ($w) { $written = fwrite($writePipes[0], (binary) substr($this->stdin, $stdinOffset), 8192); if (false !== $written) { $stdinOffset += $written; } if ($stdinOffset >= $stdinLen) { fclose($writePipes[0]); $writePipes = null; } } foreach ($r as $pipe) { $type = array_search($pipe, $pipes); $data = fread($pipe, 8192); if (strlen($data) > 0) { call_user_func($callback, $type == 1 ? 'out' : 'err', $data); } if (false === $data || feof($pipe)) { fclose($pipe); unset($pipes[$type]); } } } $this->status = proc_get_status($process); $time = 0; while (1 == $this->status['running'] && $time < 1000000) { $time += 1000; usleep(1000); $this->status = proc_get_status($process); } $exitcode = proc_close($process); if ($this->status['signaled']) { throw new \RuntimeException(sprintf('The process stopped because of a "%s" signal.', $this->status['stopsig'])); } return $this->exitcode = $this->status['running'] ? $exitcode : $this->status['exitcode']; } public function getOutput() { return $this->stdout; } public function getErrorOutput() { return $this->stderr; } public function getExitCode() { return $this->exitcode; } public function isSuccessful() { return 0 == $this->exitcode; } public function hasBeenSignaled() { return $this->status['signaled']; } public function getTermSignal() { return $this->status['termsig']; } public function hasBeenStopped() { return $this->status['stopped']; } public function getStopSignal() { return $this->status['stopsig']; } public function addOutput($line) { $this->stdout .= $line; } public function addErrorOutput($line) { $this->stderr .= $line; } public function getCommandLine() { return $this->commandline; } public function setCommandLine($commandline) { $this->commandline = $commandline; } public function getTimeout() { return $this->timeout; } public function setTimeout($timeout) { $this->timeout = $timeout; } public function getWorkingDirectory() { return $this->cwd; } public function setWorkingDirectory($cwd) { $this->cwd = $cwd; } public function getEnv() { return $this->env; } public function setEnv(array $env) { $this->env = $env; } public function getStdin() { return $this->stdin; } public function setStdin($stdin) { $this->stdin = $stdin; } public function getOptions() { return $this->options; } public function setOptions(array $options) { $this->options = $options; } } 